user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

error_log  /var/log/nginx/error.log error;
worker_rlimit_nofile 100000;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    gzip on;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format json escape=json '{"time":"$time_local",'
        '"host":"$remote_addr",'
        '"forwardedfor":"$http_x_forwarded_for",'
        '"req":"$request",'
        '"status":"$status",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"body_bytes":$body_bytes_sent,'
        '"referer":"$http_referer",'
        '"ua":"$http_user_agent",'
        '"request_time":$request_time,'
        '"cache":"$upstream_http_x_cache",'
        '"runtime":"$upstream_http_x_runtime",'
        '"response_time":"$upstream_response_time",'
        '"vhost":"$host"}';

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    # sendfile on;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;

    server_tokens off;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    client_max_body_size 20m;

    access_log /var/log/nginx/access.log;

    # TLS configuration
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

    include conf.d/*.conf;
    include sites-enabled/*.conf;
}
